generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String
  post_id    String
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([post_id])
  @@index([user_id])
}

model exercises {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  workout_id    String
  exercise_name String
  sets          Int
  reps          Int[]
  weights       Decimal[] @db.Decimal
  rest_seconds  Int[]
  order         Int
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  workouts      workouts  @relation(fields: [workout_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([workout_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model follows {
  id                                String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  follower_id                       String
  following_id                      String
  created_at                        DateTime? @default(now()) @db.Timestamptz(6)
  users_follows_follower_idTousers  users     @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_following_idTousers users     @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
}

model likes {
  id         String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String
  post_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id])
  @@index([post_id])
  @@index([user_id])
}

model posts {
  id         String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id    String
  content    String
  image_url  String?
  workout_id String?
  hashtags   String[]   @default([])
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6)
  comments   comments[]
  likes      likes[]
  users      users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workouts   workouts?  @relation(fields: [workout_id], references: [id], onUpdate: NoAction)

  @@index([created_at])
  @@index([hashtags], type: Gin)
  @@index([user_id])
}

model users {
  id                                  String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                               String     @unique
  username                            String?    @unique
  avatar_url                          String?
  bio                                 String?
  created_at                          DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime?  @default(now()) @db.Timestamptz(6)
  comments                            comments[]
  follows_follows_follower_idTousers  follows[]  @relation("follows_follower_idTousers")
  follows_follows_following_idTousers follows[]  @relation("follows_following_idTousers")
  likes                               likes[]
  posts                               posts[]
  workouts                            workouts[]

  @@index([email])
  @@index([username])
}

model workouts {
  id           String      @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id      String
  name         String
  notes        String?
  duration     Int?
  completed_at DateTime?   @default(now()) @db.Timestamptz(6)
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  exercises    exercises[]
  posts        posts[]
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([completed_at])
  @@index([user_id])
}
